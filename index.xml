<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog by jferic on Blog by jferic</title>
    <link>https://jferic.github.io/</link>
    <description>Recent content in Blog by jferic on Blog by jferic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker Registry GC</title>
      <link>https://jferic.github.io/post/docker-registry-gc/</link>
      <pubDate>Mon, 18 Jun 2018 00:31:16 +0800</pubDate>
      
      <guid>https://jferic.github.io/post/docker-registry-gc/</guid>
      <description>

&lt;p&gt;我们的 CI 平台中私有化部署了 Docker Registry 用来存储 CI 过程中的镜像。这些镜像主要包括用于加速的依赖包缓存镜像和用于部署的应用镜像。但是官方提供的 Docker Registry 没有自动清理镜像的功能，导致 Registry 中的镜像会随着时间越积越多，对 Registry 的 Storage 造成了压力。&lt;/p&gt;

&lt;p&gt;考虑到 CI 平台的特性，随着应用不断打包部署，缓存镜像和应用镜像都在不断更新，历史版本的镜像是可以删除的。所以，我们尝试进行 Docker Registry GC。&lt;/p&gt;

&lt;h2 id=&#34;gc-的方法及问题&#34;&gt;GC 的方法及问题&lt;/h2&gt;

&lt;p&gt;官方文档提供的 Delete 接口是基于镜像 Manifest 的 Digest 去删除镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;DELETE /v2/&amp;lt;name&amp;gt;/manifests/&amp;lt;reference&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;For deletes, &lt;code&gt;reference&lt;/code&gt; &lt;strong&gt;must be a digest&lt;/strong&gt; or the delete will fail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们首先需要获取到所有待删除镜像的 Digest。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 首先遍历 Repositories 先获取 Tags
tags, err := registry.GetTotalRepositoryTags(env.DockerRegistry, *repo, *outputFile, env.TagsIncludes...)
... // handler error

for _, tag := range tags {
	// 然后获取该 Tag 的 Digest, by &#39;Docker-Content-Digest&#39; Header
	digest, err := registry.GetTagDigest(env.DockerRegistry, *repo, tag)
	... // handler error

	// 最后使用 Digest 删除镜像
	err = registry.DeleteDigest(env.DockerRegistry, *repo, tag, digest)
	... // handler error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后使用 Registry 的 garbage-collect 命令清理镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/registry garbage-collect [--dry-run] /path/to/config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下图是 dry-run 的结果，仅仅 57 个 blobs 被标志成可以删除，和预期的相差甚远。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://terminus-jferic.oss-cn-shanghai.aliyuncs.com/image-20180618162303741.png&#34; alt=&#34;image-20180618162303741&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;overwritten-tags-导致-blobs-未被-gc&#34;&gt;Overwritten tags 导致 blobs 未被 GC&lt;/h3&gt;

&lt;p&gt;通过查找缓存镜像 c23b08159e8e2979eeab3c3b43c46132/release 发现该 repositry 下竟然存在 manifest ，并标记了一堆相关的 blobs。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://terminus-jferic.oss-cn-shanghai.aliyuncs.com/image-20180618164316360.png&#34; alt=&#34;image-20180618164316360&#34; /&gt;&lt;/p&gt;

&lt;p&gt;查看 Registry 的 tag 目录，却并不存在任何 tag。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://terminus-jferic.oss-cn-shanghai.aliyuncs.com/image-20180618164348321.png&#34; alt=&#34;image-20180618164348321&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过 ha256:1bc8a50d8403ed7464cd97bfd41eb6d322f611e89462600068929249210f0d84 这个 digest 真实能够获取到 manifest 文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://terminus-jferic.oss-cn-shanghai.aliyuncs.com/image-20180618164814375.png&#34; alt=&#34;image-20180618164814375&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样基本确定：使用 tag 获取 digest 进而删除镜像的方法遗漏了一些 Manifests。&lt;/p&gt;

&lt;h4 id=&#34;untagged-manifests&#34;&gt;Untagged manifests&lt;/h4&gt;

&lt;p&gt;结合我们的使用场景，在官方找到很多相关的 Issues，例如：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/distribution/issues/2212&#34; target=&#34;_blank&#34;&gt;[Issue] Registry garbage-collect does not clean up blobs from overwritten tags&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/distribution/issues/2301&#34; target=&#34;_blank&#34;&gt;[Issue] Feature req: garbage-collector should have possibility to clean untagged revisions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;确定原因是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我们的缓存镜像使用 latest 作为 tag，每次打包都可能生成一个新的镜像 push 到 Registry 中，这样就出现 overwritten tags，但在 Repository 的 revisions 目录下仍然保存了历史的 manifests。&lt;/p&gt;

&lt;p&gt;即使我们删除 latest tag 标记的镜像，但因为历史的 untagged manifest 仍然关联着 blobs，所以大量的 blobs 并没有被 GC。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用社区的 patch 版本（Registry/2.7 将  release 该功能）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/distribution/pull/2302&#34; target=&#34;_blank&#34;&gt;[PR] add possibility to clean untagged manifests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以删除 untagged 的 manifest 及其关联的 blobs。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://terminus-jferic.oss-cn-shanghai.aliyuncs.com/image-20180618162303741.png&#34; alt=&#34;image-20180618162417130&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面我们简单了解一下 garbage collect 的挑战。&lt;/p&gt;

&lt;h2 id=&#34;registry-gc-的挑战&#34;&gt;Registry GC 的挑战&lt;/h2&gt;

&lt;p&gt;Registry 的物理存储包括两部分：blobs 和 repositories。其中 blobs 存储了镜像的 layers 和 manifest 数据文件，用 digest 作为 index；repositories 目录存储了个各种 Meta 数据，包括 layers、manifest 的 digest 信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://terminus-jferic.oss-cn-shanghai.aliyuncs.com/image-20180618202642208.png&#34; alt=&#34;image-20180618202642208&#34; /&gt;&lt;/p&gt;

&lt;p&gt;基本关系是 repository -&amp;gt; manifest (tag)  -&amp;gt; layer =&amp;gt; blob&lt;/p&gt;

&lt;p&gt;一个 repository 下面包含一个或者多个 manifest，可读的 tag 与manifest 关联； 一个 manifest 文件包含一个或者多个 layer；manifest 和 layer 的数据文件都存储在 blobs 目录下，以 digest 作为子目录索引 blob 数据文件。&lt;/p&gt;

&lt;p&gt;镜像的特点是分层 （layers）存储，镜像间可以共享 layer。这样删除镜像的核心挑战变成如何在 多个镜像（manifest）共享数据（layer）的情况下保证数据一致，同时保证并发写操作的原子性。&lt;/p&gt;

&lt;h4 id=&#34;garbage-collect&#34;&gt;Garbage collect&lt;/h4&gt;

&lt;p&gt;v2.6 版本的 Docker Registry 当前实现：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just find all the manifests, enumerate the referenced blobs and delete the blobs not in that set.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以实现了 mark 和 sweep 两个阶段，本质上是标记&amp;amp;清理的 Lock the World GC 机制。因为在 mark 之后如果还有新的写入（没有mark）将导致误删。&lt;/p&gt;

&lt;h3 id=&#34;deletes-on-roadmap&#34;&gt;Deletes on Roadmap&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/distribution/blob/master/ROADMAP.md#deletes&#34; target=&#34;_blank&#34;&gt;Delete section on Roadmap&lt;/a&gt; 重点讨论了删除背后的问题，也提出了 &amp;ldquo;Reference Counting&amp;rdquo;, &amp;ldquo;Generational GC&amp;rdquo;, Centralized Oracle&amp;rdquo; 等方案。本质是 &lt;strong&gt;引用计数&lt;/strong&gt;  问题，同时需要在删除时保证数据一致性。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
